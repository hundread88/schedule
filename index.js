import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import fs from 'fs';
import express from 'express';
import { DateTime } from 'luxon';

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = process.env.PORT || 3000;
const CHATS_FILE = './chats.json';
const SCHEDULE_FILE = './schedule.json';
const TIMEZONE = 'Asia/Tbilisi'; // –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (GMT+4)

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const bot = new TelegramBot(BOT_TOKEN);
const app = express();
app.use(express.json());

// --- –†–æ—É—Ç –¥–ª—è UptimeRobot ---
// –≠—Ç–æ—Ç URL –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å "OK", —á—Ç–æ–±—ã UptimeRobot –±—ã–ª –¥–æ–≤–æ–ª–µ–Ω
app.get('/health', (req, res) => {
    res.status(200).send('OK');
});

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook ---
bot.setWebHook(`${WEBHOOK_URL}/bot${BOT_TOKEN}`)
  .then(() => console.log(`[SETUP] Webhook successfully set.`))
  .catch(err => console.error('[ERROR] Critical error setting webhook:', err));

app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`[SETUP] Server is listening on port ${PORT}...`);
});

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ---
const readSchedule = () => {
    try {
        if (!fs.existsSync(SCHEDULE_FILE)) {
            const initialSchedule = { monday: [], tuesday: [], wednesday: [], thursday: [], friday: [], saturday: [], sunday: [] };
            fs.writeFileSync(SCHEDULE_FILE, JSON.stringify(initialSchedule, null, 2));
            return initialSchedule;
        }
        const data = fs.readFileSync(SCHEDULE_FILE, 'utf-8');
        return JSON.parse(data);
    } catch (e) {
        console.error("Error reading or parsing schedule file:", e);
        return {};
    }
};

const writeSchedule = (schedule) => {
    try {
        fs.writeFileSync(SCHEDULE_FILE, JSON.stringify(schedule, null, 2));
    } catch (e) {
        console.error("Error writing schedule file:", e);
    }
};

// --- –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---
let chatIds = new Set();
try {
  if (fs.existsSync(CHATS_FILE)) {
    chatIds = new Set(JSON.parse(fs.readFileSync(CHATS_FILE)));
  }
} catch (error) {
  console.error('[ERROR] Could not load chat IDs:', error);
}
const saveChatIds = () => fs.writeFileSync(CHATS_FILE, JSON.stringify([...chatIds]));

function startScheduler() {
    console.log('[SCHEDULER] Scheduler started.');
    const sentNotifications = new Set();
    setInterval(() => {
        const now = DateTime.now().setZone(TIMEZONE);
        const today = now.toFormat('cccc').toLowerCase();
        const currentTime = now.toFormat('HH:mm');
        if (chatIds.size === 0) return;
        const schedule = readSchedule();
        const tasks = schedule[today] || [];
        for (const task of tasks) {
            if (task.time === currentTime) {
                for (const chatId of chatIds) {
                    const notificationKey = `${task.time}-${today}-${chatId}`;
                    if (!sentNotifications.has(notificationKey)) {
                        const message = `üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n${task.time} ‚Äî ${task.task}`;
                        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
                           .catch(err => console.error(`Failed to send to ${chatId}:`, err.message));
                        sentNotifications.add(notificationKey);
                    }
                }
            }
        }
        if (currentTime === '00:00') {
            sentNotifications.clear();
        }
    }, 60 * 1000);
}
startScheduler();

// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  const helpText = `
üëã **–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.**
–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚ñ´Ô∏è /plan_today - –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚ñ´Ô∏è /next_task - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:**
‚ñ´Ô∏è \`/add –¥–µ–Ω—å –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∞\`
   –ü—Ä–∏–º–µ—Ä: \`/add tuesday 19:00 –£—á–∏—Ç—å JavaScript\`
‚ñ´Ô∏è \`/list –¥–µ–Ω—å\`
   –ü—Ä–∏–º–µ—Ä: \`/list tuesday\`
‚ñ´Ô∏è \`/del –¥–µ–Ω—å –Ω–æ–º–µ—Ä\`
   –ü—Ä–∏–º–µ—Ä: \`/del tuesday 3\`

–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: \`monday, tuesday, wednesday, thursday, friday, saturday, sunday\`.
  `;
  bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
  if (!chatIds.has(chatId)) {
    chatIds.add(chatId);
    saveChatIds();
  }
});

// === –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º ===
bot.onText(/\/add (\w+) (\d{2}:\d{2}) (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const day = match[1].toLowerCase();
    const time = match[2];
    const task = match[3];
    const schedule = readSchedule();
    if (!schedule.hasOwnProperty(day)) {
        return bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: monday, tuesday, –∏ —Ç.–¥.`);
    }
    schedule[day].push({ time, task });
    schedule[day].sort((a, b) => a.time.localeCompare(b.time));
    writeSchedule(schedule);
    bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "${task}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ ${day} –≤ ${time}.`);
});

bot.onText(/\/list (\w+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const day = match[1].toLowerCase();
    const schedule = readSchedule();
    if (!schedule.hasOwnProperty(day)) {
        return bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.`);
    }
    const tasks = schedule[day];
    if (!tasks || tasks.length === 0) {
        return bot.sendMessage(chatId, `–ù–∞ ${day} –∑–∞–¥–∞—á –Ω–µ—Ç.`);
    }
    const formattedList = tasks.map((t, index) => `${index + 1}. ${t.time} - ${t.task}`).join('\n');
    bot.sendMessage(chatId, `**–ü–ª–∞–Ω –Ω–∞ ${day}:**\n${formattedList}`, { parse_mode: 'Markdown' });
});

bot.onText(/\/del (\w+) (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const day = match[1].toLowerCase();
    const index = parseInt(match[2], 10) - 1;
    const schedule = readSchedule();
    if (!schedule.hasOwnProperty(day) || !schedule[day]) {
        return bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.`);
    }
    if (index < 0 || index >= schedule[day].length) {
        return bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list ${day}, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.`);
    }
    const removedTask = schedule[day].splice(index, 1)[0];
    writeSchedule(schedule);
    bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–¥–∞—á–∞ "${removedTask.task}" —É–¥–∞–ª–µ–Ω–∞.`);
});


// === –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ü–û–õ–ù–û–°–¢–¨–Æ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´) ===
bot.onText(/\/plan_today/, (msg) => {
    const chatId = msg.chat.id;
    const now = DateTime.now().setZone(TIMEZONE);
    const today = now.toFormat('cccc').toLowerCase();
    const schedule = readSchedule();
    const tasks = schedule[today] || [];
    const formatted = tasks.map(t => `üìå ${t.time} ‚Äî ${t.task}`).join('\n');
    const message = `üóì **–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${now.toFormat('dd.MM.yyyy')})**:\n\n${formatted || '–°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.'}`;
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

bot.onText(/\/next_task/, (msg) => {
    const chatId = msg.chat.id;
    const now = DateTime.now().setZone(TIMEZONE);
    const today = now.toFormat('cccc').toLowerCase();
    const schedule = readSchedule();
    const tasks = schedule[today] || [];
    const nextTask = tasks.find(task => {
        const taskTime = DateTime.fromFormat(task.time, 'HH:mm', { zone: TIMEZONE });
        return taskTime > now;
    });
    if (nextTask) {
        bot.sendMessage(chatId, `‚è≠ **–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:**\n${nextTask.time} ‚Äî ${nextTask.task}`, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    }
});


console.log('[SETUP] Bot is fully configured and starting up.');
