import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import fs from 'fs';
import express from 'express';
import { DateTime } from 'luxon';

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = process.env.PORT || 3000;
const CHATS_FILE = './chats.json';
const SCHEDULE_FILE = './schedule.json';
const TIMEZONE = 'Asia/Tbilisi'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–µ—Ä–Ω—ã–π (GMT+4)

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const bot = new TelegramBot(BOT_TOKEN);
const app = express();
app.use(express.json());

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook ---
bot.setWebHook(`${WEBHOOK_URL}/bot${BOT_TOKEN}`)
  .then(() => console.log(`[SETUP] Webhook set to ${WEBHOOK_URL}`))
  .catch(err => console.error('[ERROR] Error setting webhook:', err));

app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.get('/', (req, res) => {
  res.send('Bot is running with webhooks! Debug mode is ON.');
});

app.listen(PORT, () => {
  console.log(`[SETUP] Server is listening on port ${PORT}...`);
});


// --- –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---
let chatIds = new Set();
try {
  if (fs.existsSync(CHATS_FILE)) {
    const storedIds = JSON.parse(fs.readFileSync(CHATS_FILE));
    chatIds = new Set(storedIds);
    console.log(`[SETUP] Loaded ${chatIds.size} users from file: ${[...chatIds].join(', ')}`);
  }
} catch (error) {
  console.error('[ERROR] Could not load chat IDs:', error);
}

function saveChatIds() {
  fs.writeFileSync(CHATS_FILE, JSON.stringify([...chatIds]));
}

// --- –ó–∞–ø—É—Å–∫ –ï–î–ò–ù–û–ì–û –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
function startScheduler() {
    console.log('[SCHEDULER] Global scheduler has been started.');
    const sentNotifications = new Set();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(() => {
        const now = DateTime.now().setZone(TIMEZONE);
        const today = now.toFormat('cccc').toLowerCase();
        const currentTime = now.toFormat('HH:mm');

        // --- –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î ---
        console.log(`\n[DEBUG] Tick! Current Time: ${now.toFormat('HH:mm:ss')}, Day: ${today}`);
        console.log(`[DEBUG] Users to notify: ${chatIds.size > 0 ? [...chatIds].join(', ') : 'None'}`);
        // --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –í–´–í–û–î–ê ---

        if (chatIds.size === 0) {
            return; // –ù–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }

        try {
            const schedule = JSON.parse(fs.readFileSync(SCHEDULE_FILE, 'utf-8'));
            const tasks = schedule[today] || [];
            
            if (tasks.length === 0) {
                console.log(`[DEBUG] No tasks scheduled for ${today}.`);
                return;
            }

            console.log(`[DEBUG] Checking ${tasks.length} tasks for ${today}...`);

            for (const task of tasks) {
                // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                if (task.time === currentTime) {
                    console.log(`[DEBUG] MATCH FOUND! Task: "${task.task}" at ${task.time}`);
                    
                    for (const chatId of chatIds) {
                        const notificationKey = `${task.time}-${today}-${chatId}`;
                        
                        if (!sentNotifications.has(notificationKey)) {
                            console.log(`[DEBUG] Preparing to send notification for key: ${notificationKey}`);
                            const message = `üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n${task.time} ‚Äî ${task.task}`;
                            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
                               .then(() => console.log(`[SUCCESS] Notification sent to ${chatId} for task "${task.task}"`))
                               .catch(err => console.error(`[ERROR] Failed to send to ${chatId}:`, err.message));
                            
                            sentNotifications.add(notificationKey);
                        } else {
                            console.log(`[DEBUG] Notification already sent for key: ${notificationKey}. Skipping.`);
                        }
                    }
                }
            }
        } catch (e) {
            console.error('[ERROR] A critical error occurred in the scheduler interval:', e);
        }

        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤ –ø–æ–ª–Ω–æ—á—å
        if (currentTime === '00:00') {
            console.log('[SCHEDULER] Performing daily cleanup of notifications cache.');
            sentNotifications.clear();
        }

    }, 60 * 1000); 
}

startScheduler(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫


// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.');
  
  if (!chatIds.has(chatId)) {
    chatIds.add(chatId);
    saveChatIds();
    console.log(`[EVENT] New user added: ${chatId}. Total users: ${chatIds.size}`);
  } else {
    console.log(`[EVENT] User ${chatId} restarted the bot.`);
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
bot.onText(/\/plan_today/, msg => {
    // ... –≤–∞—à –∫–æ–¥ –¥–ª—è /plan_today
});
bot.onText(/\/next_task/, msg => {
    // ... –≤–∞—à –∫–æ–¥ –¥–ª—è /next_task
});

console.log('[SETUP] Bot is starting with Webhook configuration...');

```

### –í–∞—à –ü–ª–∞–Ω –î–µ–π—Å—Ç–≤–∏–π (–ø–æ —à–∞–≥–∞–º)

1.  **–ó–∞–º–µ–Ω–∏—Ç–µ –∫–æ–¥:** –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à `index.js` –Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –≤–µ—Ä—Å–∏—é –≤—ã—à–µ.
2.  **–î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É:** –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à —Ñ–∞–π–ª `schedule.json`. –î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∑–∞–¥–∞—á—É, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Å—Ç—É–ø–∏—Ç **—á–µ—Ä–µ–∑ 3-5 –º–∏–Ω—É—Ç** –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å 18:20, –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ `18:25`.
    ```json
    "tuesday": [
      { "time": "18:25", "task": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" },
      // ... –¥—Ä—É–≥–∏–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏
    ],
    ```
3.  **–†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –±–æ—Ç–∞:** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–¥–µ–ø–ª–æ–π—Ç–µ (—Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ) –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ Render.
4.  **–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É `/start`:** –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É `/start` –≤ Telegram. –≠—Ç–æ **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ**, —á—Ç–æ–±—ã –≤–∞—à `chatId` –ø–æ–ø–∞–ª –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏. –í –ª–æ–≥–∞—Ö –Ω–∞ Render –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ `[EVENT] New user added: ...`.
5.  **–ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏:** –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª "Logs" –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render. –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –±–ª–æ–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å `[DEBUG] Tick! ...`.
6.  **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** –î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—Ä–µ–º—è –≤–∞—à–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ.

–≠—Ç–∏ –ª–æ–≥–∏ –ø–æ–∫–∞–∂—É—Ç –Ω–∞–º –≤—Å—ë: –≤–∏–¥–∏—Ç –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–∞—à `chatId`, –Ω–∞—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω –Ω—É–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –∏ –ø–æ—á–µ–º—É –æ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ
