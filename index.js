import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import fs from 'fs';
import express from 'express';
import { DateTime } from 'luxon';
import { startScheduler } from './utils/scheduler.js';

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const PORT = process.env.PORT || 3000;
const CHATS_FILE = './chats.json';
const SCHEDULE_FILE = './schedule.json';
const TIMEZONE = 'Asia/Tbilisi'; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (GMT+4)

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const app = express();

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
let chatIds = new Set();

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö chatId –∏–∑ —Ñ–∞–π–ª–∞
try {
  if (fs.existsSync(CHATS_FILE)) {
    const storedIds = JSON.parse(fs.readFileSync(CHATS_FILE));
    chatIds = new Set(storedIds);
    console.log(`Loaded ${chatIds.size} users from file.`);
  }
} catch (error) {
  console.error('Could not load chat IDs:', error);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chatId
function saveChatIds() {
  fs.writeFileSync(CHATS_FILE, JSON.stringify([...chatIds]));
}

// --- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–ï–î–ò–ù–û–ñ–î–´) ---
// –ü–µ—Ä–µ–¥–∞–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—é, 
// –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
startScheduler(bot, () => chatIds);


// --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ (Render, Heroku –∏ —Ç.–¥.) ---
app.get('/', (req, res) => {
  res.send('Bot is running smoothly!');
});
app.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}...`);
});


// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–µ–±–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /plan_today –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ /next_task –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏.');
  
  if (!chatIds.has(chatId)) {
    chatIds.add(chatId);
    saveChatIds();
    console.log(`New user added: ${chatId}. Total users: ${chatIds.size}`);
  }
});

bot.onText(/\/plan_today/, msg => {
  const now = DateTime.now().setZone(TIMEZONE);
  const today = now.toFormat('cccc').toLowerCase(); // e.g., 'sunday'
  
  const schedule = JSON.parse(fs.readFileSync(SCHEDULE_FILE, 'utf-8'));
  const tasks = schedule[today] || [];
  
  const formatted = tasks.map(t => `üìå ${t.time} ‚Äî ${t.task}`).join('\n');
  const message = `üóì **–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${now.toFormat('dd.MM.yyyy')})**:\n\n${formatted || '–°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.'}`;
  
  bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

bot.onText(/\/next_task/, msg => {
  const now = DateTime.now().setZone(TIMEZONE);
  const today = now.toFormat('cccc').toLowerCase(); // 'sunday'
  
  const schedule = JSON.parse(fs.readFileSync(SCHEDULE_FILE, 'utf-8'));
  const tasks = schedule[today] || [];

  const nextTask = tasks.find(task => {
    const taskTime = DateTime.fromFormat(task.time, 'HH:mm', { zone: TIMEZONE });
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –¥–∞—Ç–∞ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
    return taskTime > now;
  });

  if (nextTask) {
    bot.sendMessage(msg.chat.id, `‚è≠ **–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:**\n${nextTask.time} ‚Äî ${nextTask.task}`, { parse_mode: 'Markdown' });
  } else {
    bot.sendMessage(msg.chat.id, '‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
  }
});

console.log('Bot has been started successfully!');
