import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import fs from 'fs';
import express from 'express';
import { DateTime } from 'luxon';

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL; // –í–∞–∂–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
const PORT = process.env.PORT || 3000;
const CHATS_FILE = './chats.json';
const SCHEDULE_FILE = './schedule.json';
const TIMEZONE = 'Asia/Tbilisi'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–µ—Ä–Ω—ã–π (GMT+4)

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
// –í–ê–ñ–ù–û: –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling!
const bot = new TelegramBot(BOT_TOKEN);
const app = express();

// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-—Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.use(express.json());

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook ---
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
bot.setWebHook(`${WEBHOOK_URL}/bot${BOT_TOKEN}`)
  .then(() => console.log(`Webhook set to ${WEBHOOK_URL}`))
  .catch(err => console.error('Error setting webhook:', err));

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200); // –û—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ –≤—Å–µ –ø–æ–ª—É—á–∏–ª–∏
});

// --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ ---
app.get('/', (req, res) => {
  res.send('Bot is running with webhooks!');
});
app.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}...`);
});


// --- –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã) ---

let chatIds = new Set();

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö chatId
try {
  if (fs.existsSync(CHATS_FILE)) {
    const storedIds = JSON.parse(fs.readFileSync(CHATS_FILE));
    chatIds = new Set(storedIds);
    console.log(`Loaded ${chatIds.size} users from file.`);
  }
} catch (error) {
  console.error('Could not load chat IDs:', error);
}

function saveChatIds() {
  fs.writeFileSync(CHATS_FILE, JSON.stringify([...chatIds]));
}

// --- –ó–∞–ø—É—Å–∫ –ï–î–ò–ù–û–ì–û –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
function startScheduler() {
    console.log('Global scheduler has been started.');
    const sentNotifications = new Set();

    setInterval(() => {
        const now = DateTime.now().setZone(TIMEZONE);
        const today = now.toFormat('cccc').toLowerCase();
        const currentTime = now.toFormat('HH:mm');

        if (chatIds.size === 0) return;

        const schedule = JSON.parse(fs.readFileSync(SCHEDULE_FILE, 'utf-8'));
        const tasks = schedule[today] || [];

        for (const task of tasks) {
            if (task.time === currentTime) {
                for (const chatId of chatIds) {
                    const notificationKey = `${task.time}-${today}-${chatId}`;
                    if (!sentNotifications.has(notificationKey)) {
                        const message = `üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n${task.time} ‚Äî ${task.task}`;
                        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
                           .catch(err => console.error(`Failed to send to ${chatId}:`, err.message));
                        sentNotifications.add(notificationKey);
                    }
                }
            }
        }
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤ –ø–æ–ª–Ω–æ—á—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        if (currentTime === '00:00') {
            console.log('Clearing daily notifications cache.');
            sentNotifications.clear();
        }

    }, 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

startScheduler(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–¥–∏–Ω —Ä–∞–∑


// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.');
  
  if (!chatIds.has(chatId)) {
    chatIds.add(chatId);
    saveChatIds();
    console.log(`New user added: ${chatId}. Total users: ${chatIds.size}`);
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/plan_today, /next_task) –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏.
// (–ö–æ–¥ –¥–ª—è –Ω–∏—Ö –∑–¥–µ—Å—å –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ)
bot.onText(/\/plan_today/, msg => {
  const now = DateTime.now().setZone(TIMEZONE);
  const today = now.toFormat('cccc').toLowerCase();
  
  const schedule = JSON.parse(fs.readFileSync(SCHEDULE_FILE, 'utf-8'));
  const tasks = schedule[today] || [];
  
  const formatted = tasks.map(t => `üìå ${t.time} ‚Äî ${t.task}`).join('\n');
  const message = `üóì **–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${now.toFormat('dd.MM.yyyy')})**:\n\n${formatted || '–°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.'}`;
  
  bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

bot.onText(/\/next_task/, msg => {
  const now = DateTime.now().setZone(TIMEZONE);
  const today = now.toFormat('cccc').toLowerCase();
  
  const schedule = JSON.parse(fs.readFileSync(SCHEDULE_FILE, 'utf-8'));
  const tasks = schedule[today] || [];

  const nextTask = tasks.find(task => {
    const taskTime = DateTime.fromFormat(task.time, 'HH:mm', { zone: TIMEZONE });
    return taskTime > now;
  });

  if (nextTask) {
    bot.sendMessage(msg.chat.id, `‚è≠ **–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:**\n${nextTask.time} ‚Äî ${nextTask.task}`, { parse_mode: 'Markdown' });
  } else {
    bot.sendMessage(msg.chat.id, '‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
  }
});


console.log('Bot is starting with Webhook configuration...');
